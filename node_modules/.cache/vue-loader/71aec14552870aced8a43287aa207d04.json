{"remainingRequest":"/home/arogers/Documents/googleMap/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/arogers/Documents/googleMap/src/App.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/arogers/Documents/googleMap/src/App.vue","mtime":1596544728851},{"path":"/home/arogers/Documents/googleMap/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/arogers/Documents/googleMap/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/arogers/Documents/googleMap/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/arogers/Documents/googleMap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/arogers/Documents/googleMap/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCmh0bWwsCmJvZHkgewogIG1hcmdpbjogMDsKICBwYWRkaW5nOiAwOwp9CiNjb250YWluZXJ7CiAgcG9zaXRpb246IHJlbGF0aXZlOwp9CiNzZWFyY2hkaXZ7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHRvcDoxMHB4OwogIGxlZnQ6NTAlOwp9CiNtYXAgewogIHdpZHRoOiAxMDB2dzsKICBoZWlnaHQ6IDEwMHZoOwp9Cg=="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n    <div id=container>\n      \n      <div id=\"map\"></div>\n      <div id=\"searchdiv\">\n        <input type=\"text\" id=\"pac-input\" />\n        </div>\n    </div>  \n</template>\n\n<script>\nimport gmapsInit from './utils/gmaps';\nimport 'regenerator-runtime/runtime';\nexport default {\n  name: 'App',\n\n  data() {\n      return {\n            map: null,\n            google: null\n      }\n  },\n  async mounted() {\n      try {\n          this.google = await gmapsInit();\n          this.map = new this.google.maps.Map(document.getElementById(\"map\"), { zoom: 8, center: {lat: 31.717831, lng: -84.247732}});\n          this.searchBox();\n      } catch ( error ) {\n          console.log(error);\n      }\n  },\n  methods: {\n    searchBox(){\n      const input = document.getElementById(\"pac-input\");\n      const searchBox = new this.google.maps.places.SearchBox(input);\n      this.map.controls[this.google.maps.ControlPosition.TOP_LEFT].push(input);\n      // Bias the SearchBox results towards current map's viewport.\n      this.map.addListener(\"bounds_changed\", () => {\n        searchBox.setBounds(this.map.getBounds());\n      });\n      let markers = [];\n      // Listen for the event fired when the user selects a prediction and retrieve\n      // more details for that place.\n      searchBox.addListener(\"places_changed\", () => {\n        const places = searchBox.getPlaces();\n\n        if (places.length == 0) {\n          return;\n        }\n        // Clear out the old markers.\n        markers.forEach(marker => {\n          marker.setMap(null);\n        });\n        markers = [];\n        // For each place, get the icon, name and location.\n        const bounds = new this.google.maps.LatLngBounds();\n        places.forEach(place => {\n          if (!place.geometry) {\n            console.log(\"Returned place contains no geometry\");\n            return;\n          }\n          const icon = {\n            url: place.icon,\n            size: new this.google.maps.Size(71, 71),\n            origin: new this.google.maps.Point(0, 0),\n            anchor: new this.google.maps.Point(17, 34),\n            scaledSize: new this.google.maps.Size(25, 25)\n          };\n          // Create a marker for each place.\n          markers.push(\n            new this.google.maps.Marker({\n              map: this.map,\n              icon,\n              title: place.name,\n              position: place.geometry.location\n            })\n          );\n\n          if (place.geometry.viewport) {\n            // Only geocodes have viewport.\n            bounds.union(place.geometry.viewport);\n          } else {\n            bounds.extend(place.geometry.location);\n          }\n        });\n        this.map.fitBounds(bounds);\n      });\n    }\n  }\n}\n\n</script>\n\n<style>\nhtml,\nbody {\n  margin: 0;\n  padding: 0;\n}\n#container{\n  position: relative;\n}\n#searchdiv{\n  position: absolute;\n  top:10px;\n  left:50%;\n}\n#map {\n  width: 100vw;\n  height: 100vh;\n}\n</style>"]}]}