{"remainingRequest":"/home/arogers/Documents/googleMap/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/arogers/Documents/googleMap/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/arogers/Documents/googleMap/src/App.vue","mtime":1596544728851},{"path":"/home/arogers/Documents/googleMap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/arogers/Documents/googleMap/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/arogers/Documents/googleMap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/arogers/Documents/googleMap/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBnbWFwc0luaXQgZnJvbSAnLi91dGlscy9nbWFwcyc7CmltcG9ydCAncmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lJzsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdBcHAnLAoKICBkYXRhKCkgewogICAgICByZXR1cm4gewogICAgICAgICAgICBtYXA6IG51bGwsCiAgICAgICAgICAgIGdvb2dsZTogbnVsbAogICAgICB9CiAgfSwKICBhc3luYyBtb3VudGVkKCkgewogICAgICB0cnkgewogICAgICAgICAgdGhpcy5nb29nbGUgPSBhd2FpdCBnbWFwc0luaXQoKTsKICAgICAgICAgIHRoaXMubWFwID0gbmV3IHRoaXMuZ29vZ2xlLm1hcHMuTWFwKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtYXAiKSwgeyB6b29tOiA4LCBjZW50ZXI6IHtsYXQ6IDMxLjcxNzgzMSwgbG5nOiAtODQuMjQ3NzMyfX0pOwogICAgICAgICAgdGhpcy5zZWFyY2hCb3goKTsKICAgICAgfSBjYXRjaCAoIGVycm9yICkgewogICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpOwogICAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBzZWFyY2hCb3goKXsKICAgICAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgicGFjLWlucHV0Iik7CiAgICAgIGNvbnN0IHNlYXJjaEJveCA9IG5ldyB0aGlzLmdvb2dsZS5tYXBzLnBsYWNlcy5TZWFyY2hCb3goaW5wdXQpOwogICAgICB0aGlzLm1hcC5jb250cm9sc1t0aGlzLmdvb2dsZS5tYXBzLkNvbnRyb2xQb3NpdGlvbi5UT1BfTEVGVF0ucHVzaChpbnB1dCk7CiAgICAgIC8vIEJpYXMgdGhlIFNlYXJjaEJveCByZXN1bHRzIHRvd2FyZHMgY3VycmVudCBtYXAncyB2aWV3cG9ydC4KICAgICAgdGhpcy5tYXAuYWRkTGlzdGVuZXIoImJvdW5kc19jaGFuZ2VkIiwgKCkgPT4gewogICAgICAgIHNlYXJjaEJveC5zZXRCb3VuZHModGhpcy5tYXAuZ2V0Qm91bmRzKCkpOwogICAgICB9KTsKICAgICAgbGV0IG1hcmtlcnMgPSBbXTsKICAgICAgLy8gTGlzdGVuIGZvciB0aGUgZXZlbnQgZmlyZWQgd2hlbiB0aGUgdXNlciBzZWxlY3RzIGEgcHJlZGljdGlvbiBhbmQgcmV0cmlldmUKICAgICAgLy8gbW9yZSBkZXRhaWxzIGZvciB0aGF0IHBsYWNlLgogICAgICBzZWFyY2hCb3guYWRkTGlzdGVuZXIoInBsYWNlc19jaGFuZ2VkIiwgKCkgPT4gewogICAgICAgIGNvbnN0IHBsYWNlcyA9IHNlYXJjaEJveC5nZXRQbGFjZXMoKTsKCiAgICAgICAgaWYgKHBsYWNlcy5sZW5ndGggPT0gMCkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICAvLyBDbGVhciBvdXQgdGhlIG9sZCBtYXJrZXJzLgogICAgICAgIG1hcmtlcnMuZm9yRWFjaChtYXJrZXIgPT4gewogICAgICAgICAgbWFya2VyLnNldE1hcChudWxsKTsKICAgICAgICB9KTsKICAgICAgICBtYXJrZXJzID0gW107CiAgICAgICAgLy8gRm9yIGVhY2ggcGxhY2UsIGdldCB0aGUgaWNvbiwgbmFtZSBhbmQgbG9jYXRpb24uCiAgICAgICAgY29uc3QgYm91bmRzID0gbmV3IHRoaXMuZ29vZ2xlLm1hcHMuTGF0TG5nQm91bmRzKCk7CiAgICAgICAgcGxhY2VzLmZvckVhY2gocGxhY2UgPT4gewogICAgICAgICAgaWYgKCFwbGFjZS5nZW9tZXRyeSkgewogICAgICAgICAgICBjb25zb2xlLmxvZygiUmV0dXJuZWQgcGxhY2UgY29udGFpbnMgbm8gZ2VvbWV0cnkiKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQogICAgICAgICAgY29uc3QgaWNvbiA9IHsKICAgICAgICAgICAgdXJsOiBwbGFjZS5pY29uLAogICAgICAgICAgICBzaXplOiBuZXcgdGhpcy5nb29nbGUubWFwcy5TaXplKDcxLCA3MSksCiAgICAgICAgICAgIG9yaWdpbjogbmV3IHRoaXMuZ29vZ2xlLm1hcHMuUG9pbnQoMCwgMCksCiAgICAgICAgICAgIGFuY2hvcjogbmV3IHRoaXMuZ29vZ2xlLm1hcHMuUG9pbnQoMTcsIDM0KSwKICAgICAgICAgICAgc2NhbGVkU2l6ZTogbmV3IHRoaXMuZ29vZ2xlLm1hcHMuU2l6ZSgyNSwgMjUpCiAgICAgICAgICB9OwogICAgICAgICAgLy8gQ3JlYXRlIGEgbWFya2VyIGZvciBlYWNoIHBsYWNlLgogICAgICAgICAgbWFya2Vycy5wdXNoKAogICAgICAgICAgICBuZXcgdGhpcy5nb29nbGUubWFwcy5NYXJrZXIoewogICAgICAgICAgICAgIG1hcDogdGhpcy5tYXAsCiAgICAgICAgICAgICAgaWNvbiwKICAgICAgICAgICAgICB0aXRsZTogcGxhY2UubmFtZSwKICAgICAgICAgICAgICBwb3NpdGlvbjogcGxhY2UuZ2VvbWV0cnkubG9jYXRpb24KICAgICAgICAgICAgfSkKICAgICAgICAgICk7CgogICAgICAgICAgaWYgKHBsYWNlLmdlb21ldHJ5LnZpZXdwb3J0KSB7CiAgICAgICAgICAgIC8vIE9ubHkgZ2VvY29kZXMgaGF2ZSB2aWV3cG9ydC4KICAgICAgICAgICAgYm91bmRzLnVuaW9uKHBsYWNlLmdlb21ldHJ5LnZpZXdwb3J0KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGJvdW5kcy5leHRlbmQocGxhY2UuZ2VvbWV0cnkubG9jYXRpb24pOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIHRoaXMubWFwLmZpdEJvdW5kcyhib3VuZHMpOwogICAgICB9KTsKICAgIH0KICB9Cn0KCg=="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;AAWA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n    <div id=container>\n      \n      <div id=\"map\"></div>\n      <div id=\"searchdiv\">\n        <input type=\"text\" id=\"pac-input\" />\n        </div>\n    </div>  \n</template>\n\n<script>\nimport gmapsInit from './utils/gmaps';\nimport 'regenerator-runtime/runtime';\nexport default {\n  name: 'App',\n\n  data() {\n      return {\n            map: null,\n            google: null\n      }\n  },\n  async mounted() {\n      try {\n          this.google = await gmapsInit();\n          this.map = new this.google.maps.Map(document.getElementById(\"map\"), { zoom: 8, center: {lat: 31.717831, lng: -84.247732}});\n          this.searchBox();\n      } catch ( error ) {\n          console.log(error);\n      }\n  },\n  methods: {\n    searchBox(){\n      const input = document.getElementById(\"pac-input\");\n      const searchBox = new this.google.maps.places.SearchBox(input);\n      this.map.controls[this.google.maps.ControlPosition.TOP_LEFT].push(input);\n      // Bias the SearchBox results towards current map's viewport.\n      this.map.addListener(\"bounds_changed\", () => {\n        searchBox.setBounds(this.map.getBounds());\n      });\n      let markers = [];\n      // Listen for the event fired when the user selects a prediction and retrieve\n      // more details for that place.\n      searchBox.addListener(\"places_changed\", () => {\n        const places = searchBox.getPlaces();\n\n        if (places.length == 0) {\n          return;\n        }\n        // Clear out the old markers.\n        markers.forEach(marker => {\n          marker.setMap(null);\n        });\n        markers = [];\n        // For each place, get the icon, name and location.\n        const bounds = new this.google.maps.LatLngBounds();\n        places.forEach(place => {\n          if (!place.geometry) {\n            console.log(\"Returned place contains no geometry\");\n            return;\n          }\n          const icon = {\n            url: place.icon,\n            size: new this.google.maps.Size(71, 71),\n            origin: new this.google.maps.Point(0, 0),\n            anchor: new this.google.maps.Point(17, 34),\n            scaledSize: new this.google.maps.Size(25, 25)\n          };\n          // Create a marker for each place.\n          markers.push(\n            new this.google.maps.Marker({\n              map: this.map,\n              icon,\n              title: place.name,\n              position: place.geometry.location\n            })\n          );\n\n          if (place.geometry.viewport) {\n            // Only geocodes have viewport.\n            bounds.union(place.geometry.viewport);\n          } else {\n            bounds.extend(place.geometry.location);\n          }\n        });\n        this.map.fitBounds(bounds);\n      });\n    }\n  }\n}\n\n</script>\n\n<style>\nhtml,\nbody {\n  margin: 0;\n  padding: 0;\n}\n#container{\n  position: relative;\n}\n#searchdiv{\n  position: absolute;\n  top:10px;\n  left:50%;\n}\n#map {\n  width: 100vw;\n  height: 100vh;\n}\n</style>"]}]}